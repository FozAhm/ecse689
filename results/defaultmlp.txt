ECSE 689 Machine Learnng
Data Being Analyzed: default_of_credit_card_clients.csv
Number of Rows in Data: 30002
Sample: 1 ,Feautures: [20000, 2, 2, 1, 24, 2, 2, -1, -1, -2, -2, 3913, 3102, 689, 0, 0, 0, 0, 689, 0, 0, 0, 0] ,Target: 1
Sample: 2 ,Feautures: [120000, 2, 2, 2, 26, -1, 2, 0, 0, 0, 2, 2682, 1725, 2682, 3272, 3455, 3261, 0, 1000, 1000, 1000, 0, 2000] ,Target: 1
Sample: 3 ,Feautures: [90000, 2, 2, 2, 34, 0, 0, 0, 0, 0, 0, 29239, 14027, 13559, 14331, 14948, 15549, 1518, 1500, 1000, 1000, 1000, 5000] ,Target: 0
Sample: 4 ,Feautures: [50000, 2, 2, 1, 37, 0, 0, 0, 0, 0, 0, 46990, 48233, 49291, 28314, 28959, 29547, 2000, 2019, 1200, 1100, 1069, 1000] ,Target: 0
Sample: 5 ,Feautures: [50000, 1, 2, 1, 57, -1, 0, -1, 0, 0, 0, 8617, 5670, 35835, 20940, 19146, 19131, 2000, 36681, 10000, 9000, 689, 679] ,Target: 0
Sample: 6 ,Feautures: [50000, 1, 1, 2, 37, 0, 0, 0, 0, 0, 0, 64400, 57069, 57608, 19394, 19619, 20024, 2500, 1815, 657, 1000, 1000, 800] ,Target: 0
Sample: 7 ,Feautures: [500000, 1, 1, 2, 29, 0, 0, 0, 0, 0, 0, 367965, 412023, 445007, 542653, 483003, 473944, 55000, 40000, 38000, 20239, 13750, 13770] ,Target: 0
Sample: 8 ,Feautures: [100000, 2, 2, 2, 23, 0, -1, -1, 0, 0, -1, 11876, 380, 601, 221, -159, 567, 380, 601, 0, 581, 1687, 1542] ,Target: 0
Sample: 9 ,Feautures: [140000, 2, 3, 1, 28, 0, 0, 2, 0, 0, 0, 11285, 14096, 12108, 12211, 11793, 3719, 3329, 0, 432, 1000, 1000, 1000] ,Target: 0
Sample: 10 ,Feautures: [20000, 1, 3, 2, 35, -2, -2, -2, -2, -1, -1, 0, 0, 0, 0, 13007, 13912, 0, 0, 0, 13007, 1122, 0] ,Target: 0
You Choose MLP Neural Networks
Best parameters set found on development set:

{'activation': 'relu', 'alpha': 1e-05, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'adam'}

Grid scores on development set:

0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 0.0001, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'lbfgs'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 0.0001, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'sgd'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 0.0001, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'adam'}
0.777 (+/-0.001) for {'activation': 'logistic', 'alpha': 0.0001, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'lbfgs'}
0.777 (+/-0.000) for {'activation': 'logistic', 'alpha': 0.0001, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'sgd'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 0.0001, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'adam'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 0.0001, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'lbfgs'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 0.0001, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'sgd'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 0.0001, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'adam'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 1e-05, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'lbfgs'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 1e-05, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'sgd'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 1e-05, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'adam'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 1e-05, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'lbfgs'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 1e-05, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'sgd'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 1e-05, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'adam'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 1e-05, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'lbfgs'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 1e-05, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'sgd'}
0.778 (+/-0.000) for {'activation': 'logistic', 'alpha': 1e-05, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'adam'}
0.778 (+/-0.000) for {'activation': 'tanh', 'alpha': 0.0001, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'lbfgs'}
0.775 (+/-0.006) for {'activation': 'tanh', 'alpha': 0.0001, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'sgd'}
0.777 (+/-0.000) for {'activation': 'tanh', 'alpha': 0.0001, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'adam'}
0.777 (+/-0.001) for {'activation': 'tanh', 'alpha': 0.0001, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'lbfgs'}
0.777 (+/-0.001) for {'activation': 'tanh', 'alpha': 0.0001, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'sgd'}
0.778 (+/-0.000) for {'activation': 'tanh', 'alpha': 0.0001, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'adam'}
0.777 (+/-0.001) for {'activation': 'tanh', 'alpha': 0.0001, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'lbfgs'}
0.777 (+/-0.000) for {'activation': 'tanh', 'alpha': 0.0001, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'sgd'}
0.778 (+/-0.000) for {'activation': 'tanh', 'alpha': 0.0001, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'adam'}
0.777 (+/-0.000) for {'activation': 'tanh', 'alpha': 1e-05, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'lbfgs'}
0.776 (+/-0.003) for {'activation': 'tanh', 'alpha': 1e-05, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'sgd'}
0.777 (+/-0.001) for {'activation': 'tanh', 'alpha': 1e-05, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'adam'}
0.777 (+/-0.001) for {'activation': 'tanh', 'alpha': 1e-05, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'lbfgs'}
0.777 (+/-0.001) for {'activation': 'tanh', 'alpha': 1e-05, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'sgd'}
0.777 (+/-0.001) for {'activation': 'tanh', 'alpha': 1e-05, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'adam'}
0.777 (+/-0.001) for {'activation': 'tanh', 'alpha': 1e-05, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'lbfgs'}
0.778 (+/-0.000) for {'activation': 'tanh', 'alpha': 1e-05, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'sgd'}
0.778 (+/-0.000) for {'activation': 'tanh', 'alpha': 1e-05, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'adam'}
0.777 (+/-0.000) for {'activation': 'relu', 'alpha': 0.0001, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'lbfgs'}
0.778 (+/-0.000) for {'activation': 'relu', 'alpha': 0.0001, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'sgd'}
0.777 (+/-0.000) for {'activation': 'relu', 'alpha': 0.0001, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'adam'}
0.711 (+/-0.053) for {'activation': 'relu', 'alpha': 0.0001, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'lbfgs'}
0.778 (+/-0.000) for {'activation': 'relu', 'alpha': 0.0001, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'sgd'}
0.636 (+/-0.348) for {'activation': 'relu', 'alpha': 0.0001, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'adam'}
0.486 (+/-0.430) for {'activation': 'relu', 'alpha': 0.0001, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'lbfgs'}
0.778 (+/-0.000) for {'activation': 'relu', 'alpha': 0.0001, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'sgd'}
0.777 (+/-0.005) for {'activation': 'relu', 'alpha': 0.0001, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'adam'}
0.556 (+/-0.543) for {'activation': 'relu', 'alpha': 1e-05, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'lbfgs'}
0.778 (+/-0.000) for {'activation': 'relu', 'alpha': 1e-05, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'sgd'}
0.778 (+/-0.001) for {'activation': 'relu', 'alpha': 1e-05, 'hidden_layer_sizes': (5, 3), 'max_iter': 1000, 'solver': 'adam'}
0.720 (+/-0.054) for {'activation': 'relu', 'alpha': 1e-05, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'lbfgs'}
0.777 (+/-0.000) for {'activation': 'relu', 'alpha': 1e-05, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'sgd'}
0.696 (+/-0.210) for {'activation': 'relu', 'alpha': 1e-05, 'hidden_layer_sizes': (100,), 'max_iter': 1000, 'solver': 'adam'}
0.761 (+/-0.046) for {'activation': 'relu', 'alpha': 1e-05, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'lbfgs'}
0.777 (+/-0.000) for {'activation': 'relu', 'alpha': 1e-05, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'sgd'}
0.766 (+/-0.042) for {'activation': 'relu', 'alpha': 1e-05, 'hidden_layer_sizes': (100, 50), 'max_iter': 1000, 'solver': 'adam'}

Detailed classification report:

The model is trained on the full development set.
The scores are computed on the full evaluation set.

              precision    recall  f1-score   support

           0       0.78      1.00      0.88      4703
           1       0.50      0.00      0.00      1297

    accuracy                           0.78      6000
   macro avg       0.64      0.50      0.44      6000
weighted avg       0.72      0.78      0.69      6000


--- Total Program Execution Time ---
--- 309.46563744544983 seconds ---
